%YAML 1.2
---
name             : Xonsh                          # extends the default Sublime Text python package with Xonsh-specific contexts
file_extensions  : [xsh, xonshrc]
first_line_match : '^#![ \t]*/.* \bxonsh[\d\.]*\b'
scope            : source.xonsh
version          : 2
extends          : Packages/Python/Python.sublime-syntax

contexts:
  name-specials    :
    - meta_prepend : true
    - include      : builtin-functions-xonsh
  builtin-functions-xonsh:
    - match: |-
        (?x)\b(?:
          abbrevs|aliases|compilex|execx|evalx|events|print_color|exit|printx
        )\b
      scope: support.function.builtin.xonsh


  expressions-common:
    - meta_append   : true
    - include       : variable-xonsh
  variable-xonsh:                                 # capture $varA or ${...} / ${<expr>}, exclude $[ $(
    - match         :   (?=\$[^(\[])
      push          :
        - meta_scope: meta.variable.xonsh
        - match     : (?=[^$])
          pop       : true
        - match     :      \$                     # 0 match a single variable definition symbol to help with completions
          scope     : variable.other.xonsh punctuation.definition.variable.xonsh
          push      :
            - match :      \{
              scope : punctuation.section.set.begin.python
              push  : inside-var-env-xonsh
            - match : (?=[^{{identifier}}])
              pop   : true
            - match :     '{{identifier}}'
              scope : variable.other.xonsh
              push  : after-expression
  inside-var-env-xonsh:
    - meta_scope: meta.set.python variable.other.env.xonsh
    - match   : \}
      scope   : punctuation.section.set.end.python
      set     : after-expression
    - match   : \.\.\.
      scope   : variable.other.env.ellipsis.xonsh
    - include : inline-for
    - include : expression-in-a-group


  line-statements:
    - meta_prepend : true                         # prepend or ‘decorators’ will override ‘@’
    - include      : command-substitution
    - include      : python-evaluation
    - include      : function-search
    - include      : subprocess-captured
    - include      : subprocess-uncaptured
  command-substitution:                           # capture @$(<expr>)
    - match     : (?=\s*@\$)                      # strict (?=@\$\() paints the ‘$’ as 'invalid.illegal' without a ‘(’
      push      :
        - match : (?!@)
          pop   : true
        - match :   '@'
          scope : keyword.operator.subprocess.pyeval.xonsh
          push  :
            - meta_scope: meta.interpolation.command.xonsh
            - match: (?=[^$])
              pop  : true
            - match:     \$
              scope: keyword.operator.subprocess.xonsh
              push :
              - match: (?=[^(])
                pop  : true
              - match:     \(
                scope: punctuation.section.parens.begin.xonsh
                push :
                - meta_scope: meta.parens.interpolation.command.xonsh
                - match:   \)
                  scope: punctuation.section.parens.end.xonsh
                  pop  : 2
                - include: statements # the environment inside = the base environment
  python-evaluation:                              # capture @(<expr>)
    - match     : (?=\s*@\()
      push      :
        - match : (?!@)
          pop   : true
        - match :   '@'
          scope : keyword.operator.subprocess.pyeval.xonsh
          push  :
            - meta_scope: meta.interpolation.command.xonsh
            - match: (?=[^(])
              pop  : true
            - match:     \(
              scope: punctuation.section.parens.begin.xonsh
              push :
              - meta_scope: meta.parens.interpolation.command.xonsh
              - match:   \)
                scope: punctuation.section.parens.end.xonsh
                pop  : 2
              - include: statements # the environment inside = the base environment
  subprocess-captured:                            # capture $(<expr>) !(<expr>)
    - match     : (?=[$!]\()
      push      :
        - match :   '[$!]'
          scope : keyword.operator.subprocess.captured.xonsh
          push  :
            - meta_scope: meta.interpolation.command.xonsh
            - match: (?=[^(])
              pop  : true
            - match:     \(
              scope: punctuation.section.parens.begin.xonsh
              push :
              - meta_scope: meta.parens.interpolation.command.xonsh
              - match:   \)
                scope: punctuation.section.parens.end.xonsh
                pop  : 3
              - include: statements # the environment inside = the base environment
  subprocess-uncaptured:                          # capture $[<expr>] ![<expr>]
    - match     : (?=[$!]\[)
      push      :
        - match :   '[$!]'
          scope : keyword.operator.subprocess.uncaptured.xonsh
          push  :
            - meta_scope: meta.interpolation.command.xonsh
            - match: (?=[^\[])
              pop  : true
            - match:     \[
              scope: punctuation.section.brackets.begin.xonsh
              push :
              - meta_scope: meta.brackets.interpolation.command.xonsh
              - match:   \]
                scope: punctuation.section.brackets.end.xonsh
                pop  : 3
              - include: statements # the environment inside = the base environment

  function-search:                                # capture @foo`bar`
    - match     : (?=@{{identifier}}`)
      push      :
        - match : (?!@)
          pop   : true
        - match :   '@'
          scope : punctuation.definition.annotation.xonsh
          push  :
            - match  : (?=[^{{identifier}}`])
              pop    : true
            - include: function-call-wrapper-search
            - include: string-backtick
  function-call-wrapper-search:
    - meta_scope: meta.function-call.python
    - match: (?={{identifier}})
      push :
        - meta_scope: meta.function-call.xonsh meta.qualified-name.python3 variable.function.python
        - include: name-specials
        - include: generic-names
        - match  : ''
          pop    : true
  string-backtick:
    - match: "`"
      scope: punctuation.definition.string.begin.xonsh punctuation.section.arguments.begin.xonsh
      push :
        - meta_scope: meta.function-call.arguments.xonsh meta.string.xonsh string.quoted.backtick.xonsh
        - match: "`"
          scope: punctuation.definition.string.end.xonsh punctuation.section.arguments.end.xonsh
          pop  : 1
